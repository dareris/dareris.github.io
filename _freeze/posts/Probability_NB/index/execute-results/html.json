{
  "hash": "23dc16031d872f4e560bb2afd6868246",
  "result": {
    "markdown": "---\ntitle: \"Probability & Random Variable using Naive Bayes\"\nauthor: \"Rishav Khatiwada\"\ndate: \"2023-11-19\"\ncategories: [code, analysis]\nimage: \"image1.jpg\"\n---\n\n**Random Variable and Probability**\n\nA random variable is a way to describe the result of a test or experiment with numbers. If it can only be certain numbers or a list of numbers, it's called \"discrete.\" If it can be any number in a range, it's called \"continuous.\" For example, counting the cars sold in a day is discrete, while measuring a person's weight can be any number and is continuous.\n\nThe probability distribution is like a map showing how likely each result is. For discrete variables, we use a \"probability mass function\" to show how probable each number is. It has two rules: the probability for each number must be positive, and when we add up all the probabilities, it should equal one.\n\nContinuous variables can be any number, so we don't talk about the chance of getting one exact number. Instead, we talk about the chance of falling into a range of numbers.\n\n**Gaussian Naive Bayes**\n\nGaussian Naive Bayes is a smart way computers make predictions. It believes each group of things follows a certain pattern like how numbers spread out in a graph. It thinks each detail about something can independently help predict its group. It calculates the chance of something belonging to different groups and picks the one with the highest chance.\n\n**Bayes Formula:**\n\n![](https://wikimedia.org/api/rest_v1/media/math/render/svg/4211e3e7c3482573cdfbc0653d48a6279104c899){alt=\"{\\\\displaystyle P(A\\\\vert B)={\\\\frac {P(B\\\\vert A)P(A)}{P(B)}}}\"}\n\nIn this post, we will find the probability of male athletes winning the gold medals from top 5 countries in Olympics using the Gaussian Bayes Naive model of probability theory.\n\nImporting the required libraries:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as pl\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n```\n:::\n\n\nImporting the dataset\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata=pd.read_csv('athlete_events.csv', index_col=\"ID\")\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>Height</th>\n      <th>Weight</th>\n      <th>Team</th>\n      <th>NOC</th>\n      <th>Games</th>\n      <th>Year</th>\n      <th>Season</th>\n      <th>City</th>\n      <th>Sport</th>\n      <th>Event</th>\n      <th>Medal</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>A Dijiang</td>\n      <td>M</td>\n      <td>24.0</td>\n      <td>180.0</td>\n      <td>80.0</td>\n      <td>China</td>\n      <td>CHN</td>\n      <td>1992 Summer</td>\n      <td>1992</td>\n      <td>Summer</td>\n      <td>Barcelona</td>\n      <td>Basketball</td>\n      <td>Basketball Men's Basketball</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A Lamusi</td>\n      <td>M</td>\n      <td>23.0</td>\n      <td>170.0</td>\n      <td>60.0</td>\n      <td>China</td>\n      <td>CHN</td>\n      <td>2012 Summer</td>\n      <td>2012</td>\n      <td>Summer</td>\n      <td>London</td>\n      <td>Judo</td>\n      <td>Judo Men's Extra-Lightweight</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Gunnar Nielsen Aaby</td>\n      <td>M</td>\n      <td>24.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Denmark</td>\n      <td>DEN</td>\n      <td>1920 Summer</td>\n      <td>1920</td>\n      <td>Summer</td>\n      <td>Antwerpen</td>\n      <td>Football</td>\n      <td>Football Men's Football</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Edgar Lindenau Aabye</td>\n      <td>M</td>\n      <td>34.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Denmark/Sweden</td>\n      <td>DEN</td>\n      <td>1900 Summer</td>\n      <td>1900</td>\n      <td>Summer</td>\n      <td>Paris</td>\n      <td>Tug-Of-War</td>\n      <td>Tug-Of-War Men's Tug-Of-War</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Christine Jacoba Aaftink</td>\n      <td>F</td>\n      <td>21.0</td>\n      <td>185.0</td>\n      <td>82.0</td>\n      <td>Netherlands</td>\n      <td>NED</td>\n      <td>1988 Winter</td>\n      <td>1988</td>\n      <td>Winter</td>\n      <td>Calgary</td>\n      <td>Speed Skating</td>\n      <td>Speed Skating Women's 500 metres</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo make our data machine learning ready, let's first identify the missing values:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata.apply(pd.isnull).sum()/data.shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nName      0.000000\nSex       0.000000\nAge       0.034944\nHeight    0.221938\nWeight    0.231912\nTeam      0.000000\nNOC       0.000000\nGames     0.000000\nYear      0.000000\nSeason    0.000000\nCity      0.000000\nSport     0.000000\nEvent     0.000000\nMedal     0.853262\ndtype: float64\n```\n:::\n:::\n\n\nLet's select the important features and convert them into columns:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nathletes= data[[\"Team\",\"Sex\", \"Season\",\"Sport\",\"Medal\"]].copy()\n\nathletes.columns = [\"country\",\"sex\",\"season\", \"sport\",\"medal\"]\n\nathletes.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>China</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Basketball</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>China</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Judo</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Denmark</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Football</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Denmark/Sweden</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Tug-Of-War</td>\n      <td>Gold</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Netherlands</td>\n      <td>F</td>\n      <td>Winter</td>\n      <td>Speed Skating</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nathletes.apply(pd.isnull).sum()/athletes.shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ncountry    0.000000\nsex        0.000000\nseason     0.000000\nsport      0.000000\nmedal      0.853262\ndtype: float64\n```\n:::\n:::\n\n\nLet's only select the medal winning countries and drop all non-medal winning countries:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nathletes = athletes[athletes['medal'].isin(['Gold', 'Silver', 'Bronze'])].dropna(subset=['medal'])\nathletes.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135554</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Fencing</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's divide our medals category into gold and non-gold:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nnew_athletes = athletes.copy() \n\nnew_athletes['target'] = new_athletes['medal'].apply(lambda x: 'gold' if x =='Gold' else 'no gold')\nnew_athletes\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>Denmark/Sweden</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Tug-Of-War</td>\n      <td>Gold</td>\n      <td>gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Winter</td>\n      <td>Ice Hockey</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Gymnastics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135553</th>\n      <td>Soviet Union</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135554</th>\n      <td>Poland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Fencing</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>135563</th>\n      <td>Russia</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Athletics</td>\n      <td>Silver</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n<p>39783 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis implies that we still have large dataset, so to further filter it, let's take the data for summer Olympics and in sports swimming only:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nselected_sports = ['Swimming']\n\nplayer = new_athletes[new_athletes['sport'].isin(selected_sports)]\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nselected_season = ['Summer']\n\nplayers=player[player['season'].isin(selected_season)]\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplayers.apply(pd.isnull).sum()\nplayers.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>sex</th>\n      <th>season</th>\n      <th>sport</th>\n      <th>medal</th>\n      <th>target</th>\n    </tr>\n    <tr>\n      <th>ID</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Finland</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>Hungary</td>\n      <td>M</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>259</th>\n      <td>Canada</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n    <tr>\n      <th>424</th>\n      <td>South Africa</td>\n      <td>F</td>\n      <td>Summer</td>\n      <td>Swimming</td>\n      <td>Bronze</td>\n      <td>no gold</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFor the simplicity of our model, let's label encode our data for all the important features:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nlabel_encoder = LabelEncoder()\ncolumns_to_encode = ['sex', 'country', 'season', 'sport', 'target']\nplayers[columns_to_encode] = players[columns_to_encode].apply(label_encoder.fit_transform)\n```\n:::\n\n\nNow, let's identify the countries with highest gold medal wins in Olympics in Swimming:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmale_df = players[players['sex'] == 1]\n\n\nmale_medals_count = male_df.groupby('country')['medal'].count().reset_index()\n\n\nmale_top_countries = male_medals_count.sort_values(by='medal', ascending=False).head(5)\n\n\nprint(\"Top 5 countries with the most medals for males:\")\nprint(male_top_countries)\n\n\nfemale_df = players[players['sex'] == 0]\nfemale_medals_count = female_df.groupby('country')['medal'].count().reset_index()\nfemale_top_countries = female_medals_count.sort_values(by='medal', ascending=False).head(5)\n\n\nprint(\"\\nTop 5 countries with the most medals for females:\")\nprint(female_top_countries)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTop 5 countries with the most medals for males:\n    country  medal\n48       55    595\n2         2    218\n38       45     97\n21       25     97\n17       20     74\n\nTop 5 countries with the most medals for females:\n    country  medal\n36       55    471\n2         2    183\n12       16    113\n22       30     95\n14       19     83\n```\n:::\n:::\n\n\nSince we are only interested in finding the probability of countries winning gold medals in swimming by male swimmers, we will not use female swimmers data from here onwards.\n\nFiltering the male athletes and training the data:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmale_players = players[players['sex'] == 1]\n\nsubset_male_players = male_players[male_players['country'].isin(male_top_countries['country'])]\n\n\nX_subset_male = subset_male_players[['country']]\ny_subset_male = subset_male_players['target']\n\nX_train, X_test, y_train, y_test = train_test_split(X_subset_male, y_subset_male, test_size=0.3, random_state=42)\n```\n:::\n\n\nInitializing the Gaussian Naive Bayes model and fitting it:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ngnb = GaussianNB()\n\ngnb.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GaussianNB</label><div class=\"sk-toggleable__content\"><pre>GaussianNB()</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\nPredicting probabilities of individual athletes first on the test set, we get:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprobability_predictions_male = gnb.predict_proba(X_test)[:, 1]  \n\nprint(\"Predicted Probabilities for Male Athletes from Top 5 Countries:\")\n\nprint(probability_predictions_male)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPredicted Probabilities for Male Athletes from Top 5 Countries:\n[0.39268397 0.39268397 0.39268397 0.89063969 0.71646832 0.39268397\n 0.39268397 0.39268397 0.6589237  0.6589237  0.89063969 0.71646832\n 0.39268397 0.39268397 0.39268397 0.39268397 0.39268397 0.6589237\n 0.89063969 0.39268397 0.39268397 0.39268397 0.39268397 0.39268397\n 0.39268397 0.39268397 0.39268397 0.89063969 0.89063969 0.39268397\n 0.39268397 0.39268397 0.39268397 0.89063969 0.89063969 0.39268397\n 0.39268397 0.39268397 0.6589237  0.6589237  0.45770689 0.39268397\n 0.39268397 0.6589237  0.39268397 0.39268397 0.89063969 0.89063969\n 0.39268397 0.39268397 0.39268397 0.6589237  0.89063969 0.39268397\n 0.39268397 0.39268397 0.6589237  0.39268397 0.45770689 0.71646832\n 0.39268397 0.6589237  0.45770689 0.45770689 0.39268397 0.39268397\n 0.39268397 0.89063969 0.45770689 0.45770689 0.39268397 0.89063969\n 0.45770689 0.39268397 0.89063969 0.39268397 0.6589237  0.71646832\n 0.39268397 0.71646832 0.89063969 0.39268397 0.39268397 0.39268397\n 0.39268397 0.89063969 0.45770689 0.6589237  0.6589237  0.39268397\n 0.39268397 0.39268397 0.89063969 0.39268397 0.39268397 0.89063969\n 0.39268397 0.6589237  0.89063969 0.39268397 0.39268397 0.39268397\n 0.39268397 0.39268397 0.39268397 0.39268397 0.39268397 0.89063969\n 0.89063969 0.39268397 0.39268397 0.6589237  0.89063969 0.6589237\n 0.39268397 0.89063969 0.39268397 0.39268397 0.39268397 0.45770689\n 0.39268397 0.89063969 0.89063969 0.89063969 0.39268397 0.39268397\n 0.39268397 0.39268397 0.89063969 0.89063969 0.6589237  0.39268397\n 0.45770689 0.39268397 0.39268397 0.45770689 0.89063969 0.39268397\n 0.71646832 0.89063969 0.45770689 0.39268397 0.89063969 0.39268397\n 0.39268397 0.39268397 0.89063969 0.89063969 0.39268397 0.39268397\n 0.71646832 0.39268397 0.45770689 0.39268397 0.39268397 0.71646832\n 0.6589237  0.89063969 0.89063969 0.39268397 0.6589237  0.39268397\n 0.39268397 0.39268397 0.45770689 0.39268397 0.39268397 0.89063969\n 0.89063969 0.39268397 0.39268397 0.39268397 0.39268397 0.39268397\n 0.6589237  0.89063969 0.39268397 0.39268397 0.89063969 0.89063969\n 0.39268397 0.71646832 0.39268397 0.45770689 0.39268397 0.39268397\n 0.89063969 0.71646832 0.89063969 0.89063969 0.71646832 0.39268397\n 0.39268397 0.39268397 0.39268397 0.89063969 0.89063969 0.71646832\n 0.39268397 0.45770689 0.39268397 0.39268397 0.71646832 0.89063969\n 0.6589237  0.39268397 0.39268397 0.39268397 0.39268397 0.39268397\n 0.45770689 0.39268397 0.89063969 0.39268397 0.6589237  0.71646832\n 0.39268397 0.39268397 0.39268397 0.39268397 0.6589237  0.89063969\n 0.39268397 0.39268397 0.6589237  0.89063969 0.6589237  0.39268397\n 0.6589237  0.89063969 0.89063969 0.39268397 0.45770689 0.39268397\n 0.89063969 0.45770689 0.39268397 0.45770689 0.89063969 0.39268397\n 0.39268397 0.6589237  0.89063969 0.39268397 0.6589237  0.39268397\n 0.71646832 0.39268397 0.39268397 0.39268397 0.39268397 0.39268397\n 0.39268397 0.71646832 0.39268397 0.6589237  0.39268397 0.39268397\n 0.39268397 0.89063969 0.39268397 0.71646832 0.45770689 0.39268397\n 0.71646832 0.39268397 0.39268397 0.89063969 0.39268397 0.89063969\n 0.45770689 0.39268397 0.89063969 0.39268397 0.39268397 0.39268397\n 0.45770689 0.39268397 0.39268397 0.39268397 0.39268397 0.45770689\n 0.89063969 0.6589237  0.71646832 0.39268397 0.6589237  0.39268397\n 0.6589237  0.39268397 0.89063969 0.89063969 0.39268397 0.89063969\n 0.89063969 0.71646832 0.89063969 0.39268397 0.39268397 0.6589237\n 0.71646832 0.89063969 0.45770689 0.39268397 0.6589237  0.39268397\n 0.39268397 0.39268397 0.39268397 0.39268397 0.6589237  0.6589237\n 0.89063969 0.89063969 0.39268397 0.39268397 0.89063969 0.89063969\n 0.71646832 0.39268397 0.39268397 0.39268397 0.45770689 0.39268397\n 0.39268397]\n```\n:::\n:::\n\n\nIt is difficult the analyze the individual result so we try to find the combine results of prob of top 5 countries to win a medal in swimming:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nprobability_predictions_male = gnb.predict_proba(X_subset_male)[:, 1] \n\noverall_probability_male = np.mean(probability_predictions_male)\n\n\nprint(\"Overall Probability for Male Athletes from Top 5 Countries to Win a Medal:\")\nprint(overall_probability_male)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOverall Probability for Male Athletes from Top 5 Countries to Win a Medal:\n0.5449937432651061\n```\n:::\n:::\n\n\nActually, it is an interesting result because we can see that top 5 countries dominance has been so much in male swimming they have won more than half of Olympics gold.\n\nNow let's see the individual probability of top 5 countries:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmale_players = players[players['sex'] == 1]\n\n\nindividual_probabilities_male = []\n\n\nfor country in male_top_countries['country']:\n\n\n    subset_male_players_country = male_players[(male_players['country'] == country)]\n\n  \n    X_subset_male_country = subset_male_players_country[['country']]\n\n   \n    probability_predictions_male_country = gnb.predict_proba(X_subset_male_country)[:, 1]\n\n    \n    individual_probability_country = np.mean(probability_predictions_male_country)\n\n    \n    individual_probabilities_male.append(individual_probability_country)\n\n\ntotal_male_medals = male_players['target'].sum()\n\n\noverall_probabilities_male = [count / total_male_medals for count in male_top_countries['medal']]\n\n\nprint(\"\\nOverall Probabilities for Male Athletes from Top 5 Countries to Win a Medal:\")\nfor country, overall_probability in zip(male_top_countries['country'], overall_probabilities_male):\n    print(f\"{country}: {overall_probability}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nOverall Probabilities for Male Athletes from Top 5 Countries to Win a Medal:\n55: 0.5571161048689138\n2: 0.20411985018726592\n45: 0.09082397003745318\n25: 0.09082397003745318\n20: 0.06928838951310862\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nmale_top_countries['overall_probability_male'] = overall_probabilities_male\nmale_top_countries\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>country</th>\n      <th>medal</th>\n      <th>overall_probability_male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>48</th>\n      <td>55</td>\n      <td>595</td>\n      <td>0.557116</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>218</td>\n      <td>0.204120</td>\n    </tr>\n    <tr>\n      <th>38</th>\n      <td>45</td>\n      <td>97</td>\n      <td>0.090824</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>25</td>\n      <td>97</td>\n      <td>0.090824</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>20</td>\n      <td>74</td>\n      <td>0.069288</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow, we ca visualize the results in different ways:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\npl.figure(figsize=(12, 8))\n\n\nfor i, (country, medal_count, overall_probability) in enumerate(male_top_countries.itertuples(index=False)):\n    pl.bar(i, overall_probability, label=f'Country {country} (Medals: {medal_count})', alpha=0.7)\n\n\npl.xlabel('Country')\npl.ylabel('Overall Probability')\npl.title('Overall Probability for Male Athletes from Top 5 Countries to Win a Medal')\npl.xticks(range(len(male_top_countries)), male_top_countries['country'])\npl.legend()\n\n\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-20-output-1.png){width=961 height=671}\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\noverall_probabilities_male = [0.557116, 0.204120, 0.090824, 0.090824, 0.069288]\ncountries = ['55', '2', '45', '25', '20']\n\n\nsorted_data = sorted(zip(overall_probabilities_male, countries), key=lambda x: x[0])\nsorted_probabilities, sorted_countries = zip(*sorted_data)\n\n\ncumulative_probabilities = np.linspace(0, 1, len(sorted_probabilities))\n\n# Create the CDF plot\npl.figure(figsize=(10, 6))\npl.plot(sorted_probabilities, cumulative_probabilities, marker='o', linestyle='-', color='b')\n\n\nfor prob, country, cumulative_prob in zip(sorted_probabilities, sorted_countries, cumulative_probabilities):\n    pl.annotate(f'{country}', (prob, cumulative_prob), textcoords=\"offset points\", xytext=(0, 5), ha='center')\n\npl.xlabel('Overall Probability')\npl.ylabel('Cumulative Probability')\npl.title('CDF Plot of Overall Probability for Male Athletes from Top 5 Countries to Win a Medal')\npl.grid(True)\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=812 height=523}\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\noverall_probabilities_male = [0.557116, 0.204120, 0.090824, 0.090824, 0.069288]\n\n\nmale_top_countries = pd.DataFrame({\n    'country': [55, 2, 45, 25, 20],\n    'overall_probability': overall_probabilities_male\n})\n\npl.figure(figsize=(10, 6))\n\nsns.kdeplot(data=male_top_countries['overall_probability'], fill=True, common_norm=False)\n\npl.xlabel('Overall Probability')\npl.ylabel('Density')\npl.title('Kernel Density Estimate (KDE) Plot of Overall Probability for Male Athletes from Top 5 Countries to Win a Medal')\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-22-output-1.png){width=905 height=523}\n:::\n:::\n\n\nThese results clearly shows that USA is the flag bearer of Olympics swimming in male category. No one is close competitor to them. They have dominated the event overwhelmingly. Distant second is Australia, followed by Germany, Hungary and Japan. Though the latest Olympics data are unavailable, we also know that Britain and China are also not far behind to them and might catch up in upcoming events.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}