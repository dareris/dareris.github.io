{
  "hash": "e5a5240da0040b0475e6f072f1720123",
  "result": {
    "markdown": "---\ntitle: \"K-means Clustering\"\nauthor: \"Rishav Khatiwada\"\ndate: \"2023-11-19\"\ncategories: [news, code, analysis]\nimage: \"image1.png\"\n---\n\n**Introduction to Clustering:** Clustering is a type of unsupervised learning where we look at data without labeled answers. It helps find patterns and groups in examples without predefined categories. The goal is to put similar things together and keep different things apart.\n\n**Why Clustering?** Clustering is important because it helps organize unlabeled data into natural groups. There's no one-size-fits-all method, and it depends on what the user needs. It could be for simplifying data, discovering unknown patterns, creating useful groups, or finding unusual data.\n\n**Clustering Methods:**\n\n1.  **Density-Based Methods:**\n\n    -   These methods focus on dense areas with similarities, distinguishing them from less dense regions. Examples include DBSCAN and OPTICS.\n\n2.  **Hierarchical Based Methods:**\n\n    -   Clusters here form a tree-like structure based on hierarchy. They can build new clusters using existing ones. Examples include CURE and BIRCH.\n\n3.  **Partitioning Methods:**\n\n    -   These methods split objects into clusters based on certain criteria, optimizing similarity. K-means and CLARANS are examples.\n\n4.  **Grid-based Methods:**\n\n    -   Data space is divided into grid-like cells for faster clustering operations. Examples are STING, Wave Cluster, and CLIQUE.\n\n**Clustering Algorithm:**\n\n-   **K-means Clustering:**\n\n    -   It's the simplest unsupervised learning algorithm, grouping observations into clusters based on the nearest mean.\n\nReference: <https://www.geeksforgeeks.org/clustering-in-machine-learning/>\n\nIn this post we use K-means clustering as our machine learning model to analyze the successful movies and the important features that determines the success and failure of the Hollywood movies.\n\nImporting the required libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as pl\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n```\n:::\n\n\nImporting the data set:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata=pd.read_csv('movie_metadata.csv')\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>color</th>\n      <th>director_name</th>\n      <th>num_critic_for_reviews</th>\n      <th>duration</th>\n      <th>director_facebook_likes</th>\n      <th>actor_3_facebook_likes</th>\n      <th>actor_2_name</th>\n      <th>actor_1_facebook_likes</th>\n      <th>gross</th>\n      <th>genres</th>\n      <th>...</th>\n      <th>num_user_for_reviews</th>\n      <th>language</th>\n      <th>country</th>\n      <th>content_rating</th>\n      <th>budget</th>\n      <th>title_year</th>\n      <th>actor_2_facebook_likes</th>\n      <th>imdb_score</th>\n      <th>aspect_ratio</th>\n      <th>movie_facebook_likes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Color</td>\n      <td>James Cameron</td>\n      <td>723.0</td>\n      <td>178.0</td>\n      <td>0.0</td>\n      <td>855.0</td>\n      <td>Joel David Moore</td>\n      <td>1000.0</td>\n      <td>760505847.0</td>\n      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n      <td>...</td>\n      <td>3054.0</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>PG-13</td>\n      <td>237000000.0</td>\n      <td>2009.0</td>\n      <td>936.0</td>\n      <td>7.9</td>\n      <td>1.78</td>\n      <td>33000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Color</td>\n      <td>Gore Verbinski</td>\n      <td>302.0</td>\n      <td>169.0</td>\n      <td>563.0</td>\n      <td>1000.0</td>\n      <td>Orlando Bloom</td>\n      <td>40000.0</td>\n      <td>309404152.0</td>\n      <td>Action|Adventure|Fantasy</td>\n      <td>...</td>\n      <td>1238.0</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>PG-13</td>\n      <td>300000000.0</td>\n      <td>2007.0</td>\n      <td>5000.0</td>\n      <td>7.1</td>\n      <td>2.35</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Color</td>\n      <td>Sam Mendes</td>\n      <td>602.0</td>\n      <td>148.0</td>\n      <td>0.0</td>\n      <td>161.0</td>\n      <td>Rory Kinnear</td>\n      <td>11000.0</td>\n      <td>200074175.0</td>\n      <td>Action|Adventure|Thriller</td>\n      <td>...</td>\n      <td>994.0</td>\n      <td>English</td>\n      <td>UK</td>\n      <td>PG-13</td>\n      <td>245000000.0</td>\n      <td>2015.0</td>\n      <td>393.0</td>\n      <td>6.8</td>\n      <td>2.35</td>\n      <td>85000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Color</td>\n      <td>Christopher Nolan</td>\n      <td>813.0</td>\n      <td>164.0</td>\n      <td>22000.0</td>\n      <td>23000.0</td>\n      <td>Christian Bale</td>\n      <td>27000.0</td>\n      <td>448130642.0</td>\n      <td>Action|Thriller</td>\n      <td>...</td>\n      <td>2701.0</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>PG-13</td>\n      <td>250000000.0</td>\n      <td>2012.0</td>\n      <td>23000.0</td>\n      <td>8.5</td>\n      <td>2.35</td>\n      <td>164000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>Doug Walker</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>131.0</td>\n      <td>NaN</td>\n      <td>Rob Walker</td>\n      <td>131.0</td>\n      <td>NaN</td>\n      <td>Documentary</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>12.0</td>\n      <td>7.1</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 28 columns</p>\n</div>\n```\n:::\n:::\n\n\nFinding out the total elements, frequency and the most frequent data from our data set:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata.describe(include='object')\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>color</th>\n      <th>director_name</th>\n      <th>actor_2_name</th>\n      <th>genres</th>\n      <th>actor_1_name</th>\n      <th>movie_title</th>\n      <th>actor_3_name</th>\n      <th>plot_keywords</th>\n      <th>movie_imdb_link</th>\n      <th>language</th>\n      <th>country</th>\n      <th>content_rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5024</td>\n      <td>4939</td>\n      <td>5030</td>\n      <td>5043</td>\n      <td>5036</td>\n      <td>5043</td>\n      <td>5020</td>\n      <td>4890</td>\n      <td>5043</td>\n      <td>5029</td>\n      <td>5038</td>\n      <td>4740</td>\n    </tr>\n    <tr>\n      <th>unique</th>\n      <td>2</td>\n      <td>2398</td>\n      <td>3032</td>\n      <td>914</td>\n      <td>2097</td>\n      <td>4917</td>\n      <td>3521</td>\n      <td>4760</td>\n      <td>4919</td>\n      <td>46</td>\n      <td>65</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>top</th>\n      <td>Color</td>\n      <td>Steven Spielberg</td>\n      <td>Morgan Freeman</td>\n      <td>Drama</td>\n      <td>Robert De Niro</td>\n      <td>Ben-Hur</td>\n      <td>John Heard</td>\n      <td>based on novel</td>\n      <td>http://www.imdb.com/title/tt0232500/?ref_=fn_t...</td>\n      <td>English</td>\n      <td>USA</td>\n      <td>R</td>\n    </tr>\n    <tr>\n      <th>freq</th>\n      <td>4815</td>\n      <td>26</td>\n      <td>20</td>\n      <td>236</td>\n      <td>49</td>\n      <td>3</td>\n      <td>8</td>\n      <td>4</td>\n      <td>3</td>\n      <td>4704</td>\n      <td>3807</td>\n      <td>2118</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSelecting the important features that we need and converting them into the columns:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmovie= data[[\"director_name\",'num_critic_for_reviews',\"actor_1_name\",\"genres\", \"duration\",\"actor_1_facebook_likes\",\"actor_2_facebook_likes\",\"content_rating\",\"actor_3_facebook_likes\",\"gross\",\"budget\"]].copy()\n\n\nmovie.columns = [\"director_name\",'critic_review',\"actor1_name\",\"genre\", \"duration\",\"actor1_fb_likes\",\"actor2_fb_likes\",\"content_rating\",\"actor3_fb_likes\", \"gross\",\"budget\"]\n\nmovie.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>actor1_fb_likes</th>\n      <th>actor2_fb_likes</th>\n      <th>content_rating</th>\n      <th>actor3_fb_likes</th>\n      <th>gross</th>\n      <th>budget</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Cameron</td>\n      <td>723.0</td>\n      <td>CCH Pounder</td>\n      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n      <td>178.0</td>\n      <td>1000.0</td>\n      <td>936.0</td>\n      <td>PG-13</td>\n      <td>855.0</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Gore Verbinski</td>\n      <td>302.0</td>\n      <td>Johnny Depp</td>\n      <td>Action|Adventure|Fantasy</td>\n      <td>169.0</td>\n      <td>40000.0</td>\n      <td>5000.0</td>\n      <td>PG-13</td>\n      <td>1000.0</td>\n      <td>309404152.0</td>\n      <td>300000000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sam Mendes</td>\n      <td>602.0</td>\n      <td>Christoph Waltz</td>\n      <td>Action|Adventure|Thriller</td>\n      <td>148.0</td>\n      <td>11000.0</td>\n      <td>393.0</td>\n      <td>PG-13</td>\n      <td>161.0</td>\n      <td>200074175.0</td>\n      <td>245000000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Christopher Nolan</td>\n      <td>813.0</td>\n      <td>Tom Hardy</td>\n      <td>Action|Thriller</td>\n      <td>164.0</td>\n      <td>27000.0</td>\n      <td>23000.0</td>\n      <td>PG-13</td>\n      <td>23000.0</td>\n      <td>448130642.0</td>\n      <td>250000000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Doug Walker</td>\n      <td>NaN</td>\n      <td>Doug Walker</td>\n      <td>Documentary</td>\n      <td>NaN</td>\n      <td>131.0</td>\n      <td>12.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo prepare the data to be machine learning ready, let's first identify the missing values:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nmovie.apply(pd.isnull).sum()/movie.shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\ndirector_name      0.020623\ncritic_review      0.009915\nactor1_name        0.001388\ngenre              0.000000\nduration           0.002974\nactor1_fb_likes    0.001388\nactor2_fb_likes    0.002578\ncontent_rating     0.060083\nactor3_fb_likes    0.004561\ngross              0.175292\nbudget             0.097561\ndtype: float64\n```\n:::\n:::\n\n\nDropping the missing values meaning deleting the entire row of the ones which contains missing data:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmovie.dropna(axis=0, inplace=True)\nmovie\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>actor1_fb_likes</th>\n      <th>actor2_fb_likes</th>\n      <th>content_rating</th>\n      <th>actor3_fb_likes</th>\n      <th>gross</th>\n      <th>budget</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Cameron</td>\n      <td>723.0</td>\n      <td>CCH Pounder</td>\n      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n      <td>178.0</td>\n      <td>1000.0</td>\n      <td>936.0</td>\n      <td>PG-13</td>\n      <td>855.0</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Gore Verbinski</td>\n      <td>302.0</td>\n      <td>Johnny Depp</td>\n      <td>Action|Adventure|Fantasy</td>\n      <td>169.0</td>\n      <td>40000.0</td>\n      <td>5000.0</td>\n      <td>PG-13</td>\n      <td>1000.0</td>\n      <td>309404152.0</td>\n      <td>300000000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sam Mendes</td>\n      <td>602.0</td>\n      <td>Christoph Waltz</td>\n      <td>Action|Adventure|Thriller</td>\n      <td>148.0</td>\n      <td>11000.0</td>\n      <td>393.0</td>\n      <td>PG-13</td>\n      <td>161.0</td>\n      <td>200074175.0</td>\n      <td>245000000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Christopher Nolan</td>\n      <td>813.0</td>\n      <td>Tom Hardy</td>\n      <td>Action|Thriller</td>\n      <td>164.0</td>\n      <td>27000.0</td>\n      <td>23000.0</td>\n      <td>PG-13</td>\n      <td>23000.0</td>\n      <td>448130642.0</td>\n      <td>250000000.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Andrew Stanton</td>\n      <td>462.0</td>\n      <td>Daryl Sabara</td>\n      <td>Action|Adventure|Sci-Fi</td>\n      <td>132.0</td>\n      <td>640.0</td>\n      <td>632.0</td>\n      <td>PG-13</td>\n      <td>530.0</td>\n      <td>73058679.0</td>\n      <td>263700000.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5033</th>\n      <td>Shane Carruth</td>\n      <td>143.0</td>\n      <td>Shane Carruth</td>\n      <td>Drama|Sci-Fi|Thriller</td>\n      <td>77.0</td>\n      <td>291.0</td>\n      <td>45.0</td>\n      <td>PG-13</td>\n      <td>8.0</td>\n      <td>424760.0</td>\n      <td>7000.0</td>\n    </tr>\n    <tr>\n      <th>5034</th>\n      <td>Neill Dela Llana</td>\n      <td>35.0</td>\n      <td>Ian Gamazon</td>\n      <td>Thriller</td>\n      <td>80.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>Not Rated</td>\n      <td>0.0</td>\n      <td>70071.0</td>\n      <td>7000.0</td>\n    </tr>\n    <tr>\n      <th>5035</th>\n      <td>Robert Rodriguez</td>\n      <td>56.0</td>\n      <td>Carlos Gallardo</td>\n      <td>Action|Crime|Drama|Romance|Thriller</td>\n      <td>81.0</td>\n      <td>121.0</td>\n      <td>20.0</td>\n      <td>R</td>\n      <td>6.0</td>\n      <td>2040920.0</td>\n      <td>7000.0</td>\n    </tr>\n    <tr>\n      <th>5037</th>\n      <td>Edward Burns</td>\n      <td>14.0</td>\n      <td>Kerry BishÃ©</td>\n      <td>Comedy|Drama</td>\n      <td>95.0</td>\n      <td>296.0</td>\n      <td>205.0</td>\n      <td>Not Rated</td>\n      <td>133.0</td>\n      <td>4584.0</td>\n      <td>9000.0</td>\n    </tr>\n    <tr>\n      <th>5042</th>\n      <td>Jon Gunn</td>\n      <td>43.0</td>\n      <td>John August</td>\n      <td>Documentary</td>\n      <td>90.0</td>\n      <td>86.0</td>\n      <td>23.0</td>\n      <td>PG</td>\n      <td>16.0</td>\n      <td>85222.0</td>\n      <td>1100.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3833 rows Ã— 11 columns</p>\n</div>\n```\n:::\n:::\n\n\nCalculating the total facebook likes by summing the three related columns:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nmovie['total_fb_likes'] = movie['actor1_fb_likes'] + movie['actor2_fb_likes'] + movie['actor3_fb_likes']\n\nmovie = movie.drop(['actor1_fb_likes', 'actor2_fb_likes', 'actor3_fb_likes'], axis=1)\nmovie.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>content_rating</th>\n      <th>gross</th>\n      <th>budget</th>\n      <th>total_fb_likes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>James Cameron</td>\n      <td>723.0</td>\n      <td>CCH Pounder</td>\n      <td>Action|Adventure|Fantasy|Sci-Fi</td>\n      <td>178.0</td>\n      <td>PG-13</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n      <td>2791.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Gore Verbinski</td>\n      <td>302.0</td>\n      <td>Johnny Depp</td>\n      <td>Action|Adventure|Fantasy</td>\n      <td>169.0</td>\n      <td>PG-13</td>\n      <td>309404152.0</td>\n      <td>300000000.0</td>\n      <td>46000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sam Mendes</td>\n      <td>602.0</td>\n      <td>Christoph Waltz</td>\n      <td>Action|Adventure|Thriller</td>\n      <td>148.0</td>\n      <td>PG-13</td>\n      <td>200074175.0</td>\n      <td>245000000.0</td>\n      <td>11554.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Christopher Nolan</td>\n      <td>813.0</td>\n      <td>Tom Hardy</td>\n      <td>Action|Thriller</td>\n      <td>164.0</td>\n      <td>PG-13</td>\n      <td>448130642.0</td>\n      <td>250000000.0</td>\n      <td>73000.0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Andrew Stanton</td>\n      <td>462.0</td>\n      <td>Daryl Sabara</td>\n      <td>Action|Adventure|Sci-Fi</td>\n      <td>132.0</td>\n      <td>PG-13</td>\n      <td>73058679.0</td>\n      <td>263700000.0</td>\n      <td>1802.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nUsing the label encoder to convert the names into the numerals which our model thrives on:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nlabel_encoder = LabelEncoder()\n\n\nmovie['director_name'] = label_encoder.fit_transform(movie['director_name'])\n\nmovie['actor1_name'] = label_encoder.fit_transform(movie['actor1_name'])\n\nmovie['content_rating'] = label_encoder.fit_transform(movie['content_rating'])\n\nmovie['genre'] = label_encoder.fit_transform(movie['genre'])\n\nmovie.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>content_rating</th>\n      <th>gross</th>\n      <th>budget</th>\n      <th>total_fb_likes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>5033</th>\n      <td>1465</td>\n      <td>143.0</td>\n      <td>1266</td>\n      <td>714</td>\n      <td>77.0</td>\n      <td>7</td>\n      <td>424760.0</td>\n      <td>7000.0</td>\n      <td>344.0</td>\n    </tr>\n    <tr>\n      <th>5034</th>\n      <td>1164</td>\n      <td>35.0</td>\n      <td>545</td>\n      <td>749</td>\n      <td>80.0</td>\n      <td>5</td>\n      <td>70071.0</td>\n      <td>7000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5035</th>\n      <td>1379</td>\n      <td>56.0</td>\n      <td>201</td>\n      <td>170</td>\n      <td>81.0</td>\n      <td>9</td>\n      <td>2040920.0</td>\n      <td>7000.0</td>\n      <td>147.0</td>\n    </tr>\n    <tr>\n      <th>5037</th>\n      <td>428</td>\n      <td>14.0</td>\n      <td>784</td>\n      <td>511</td>\n      <td>95.0</td>\n      <td>5</td>\n      <td>4584.0</td>\n      <td>9000.0</td>\n      <td>634.0</td>\n    </tr>\n    <tr>\n      <th>5042</th>\n      <td>810</td>\n      <td>43.0</td>\n      <td>680</td>\n      <td>631</td>\n      <td>90.0</td>\n      <td>6</td>\n      <td>85222.0</td>\n      <td>1100.0</td>\n      <td>125.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's only take the movies which we assume that were successful:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmovie= movie[movie['gross'] > 3 * movie['budget']]\nmovie\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>content_rating</th>\n      <th>gross</th>\n      <th>budget</th>\n      <th>total_fb_likes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>637</td>\n      <td>723.0</td>\n      <td>192</td>\n      <td>92</td>\n      <td>178.0</td>\n      <td>7</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n      <td>2791.0</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>637</td>\n      <td>315.0</td>\n      <td>845</td>\n      <td>705</td>\n      <td>194.0</td>\n      <td>7</td>\n      <td>658672302.0</td>\n      <td>200000000.0</td>\n      <td>43794.0</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>272</td>\n      <td>644.0</td>\n      <td>186</td>\n      <td>107</td>\n      <td>124.0</td>\n      <td>7</td>\n      <td>652177271.0</td>\n      <td>150000000.0</td>\n      <td>6000.0</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>1353</td>\n      <td>187.0</td>\n      <td>1098</td>\n      <td>187</td>\n      <td>106.0</td>\n      <td>7</td>\n      <td>144512310.0</td>\n      <td>38000000.0</td>\n      <td>41000.0</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>478</td>\n      <td>502.0</td>\n      <td>634</td>\n      <td>391</td>\n      <td>146.0</td>\n      <td>7</td>\n      <td>424645577.0</td>\n      <td>130000000.0</td>\n      <td>48523.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>5027</th>\n      <td>629</td>\n      <td>64.0</td>\n      <td>456</td>\n      <td>639</td>\n      <td>90.0</td>\n      <td>5</td>\n      <td>673780.0</td>\n      <td>10000.0</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>5033</th>\n      <td>1465</td>\n      <td>143.0</td>\n      <td>1266</td>\n      <td>714</td>\n      <td>77.0</td>\n      <td>7</td>\n      <td>424760.0</td>\n      <td>7000.0</td>\n      <td>344.0</td>\n    </tr>\n    <tr>\n      <th>5034</th>\n      <td>1164</td>\n      <td>35.0</td>\n      <td>545</td>\n      <td>749</td>\n      <td>80.0</td>\n      <td>5</td>\n      <td>70071.0</td>\n      <td>7000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>5035</th>\n      <td>1379</td>\n      <td>56.0</td>\n      <td>201</td>\n      <td>170</td>\n      <td>81.0</td>\n      <td>9</td>\n      <td>2040920.0</td>\n      <td>7000.0</td>\n      <td>147.0</td>\n    </tr>\n    <tr>\n      <th>5042</th>\n      <td>810</td>\n      <td>43.0</td>\n      <td>680</td>\n      <td>631</td>\n      <td>90.0</td>\n      <td>6</td>\n      <td>85222.0</td>\n      <td>1100.0</td>\n      <td>125.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>678 rows Ã— 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nTo make our data consistent for each columns so that they can be used to compare to get the required results, we use MInMaxScalar from sklearn library:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ncolumns = [\"duration\",\"critic_review\",\"director_name\",\"genre\",\"total_fb_likes\",\"actor1_name\",\"content_rating\"]\n\nscaler = MinMaxScaler()\nmovie[columns] = scaler.fit_transform(movie[columns])\nmovie.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>content_rating</th>\n      <th>gross</th>\n      <th>budget</th>\n      <th>total_fb_likes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.373011</td>\n      <td>1.000000</td>\n      <td>0.127907</td>\n      <td>0.121495</td>\n      <td>0.654762</td>\n      <td>0.636364</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n      <td>0.004261</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.373011</td>\n      <td>0.433333</td>\n      <td>0.574555</td>\n      <td>0.939920</td>\n      <td>0.750000</td>\n      <td>0.636364</td>\n      <td>658672302.0</td>\n      <td>200000000.0</td>\n      <td>0.066861</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>0.157926</td>\n      <td>0.890278</td>\n      <td>0.123803</td>\n      <td>0.141522</td>\n      <td>0.333333</td>\n      <td>0.636364</td>\n      <td>652177271.0</td>\n      <td>150000000.0</td>\n      <td>0.009160</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0.794932</td>\n      <td>0.255556</td>\n      <td>0.747606</td>\n      <td>0.248331</td>\n      <td>0.226190</td>\n      <td>0.636364</td>\n      <td>144512310.0</td>\n      <td>38000000.0</td>\n      <td>0.062595</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>0.279316</td>\n      <td>0.693056</td>\n      <td>0.430233</td>\n      <td>0.520694</td>\n      <td>0.464286</td>\n      <td>0.636364</td>\n      <td>424645577.0</td>\n      <td>130000000.0</td>\n      <td>0.074081</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nmovie['genre'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\ngenre\n0.680908    40\n0.851802    38\n0.640854    36\n0.714286    31\n0.778371    24\n            ..\n0.638184     1\n0.789052     1\n0.871829     1\n0.958611     1\n0.998665     1\nName: count, Length: 220, dtype: int64\n```\n:::\n:::\n\n\nBefore performing the K-means Clustering, we should examine which of the K values is better for us.\n\nWe can analyze it with the help of the elbow method:\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ninertia = []\n\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=0)\n    kmeans.fit(movie)\n    inertia.append(kmeans.inertia_)\n\n\npl.figure(figsize=(8, 5))\npl.plot(range(1, 11), inertia, marker='o')\npl.xlabel('Number of Clusters (K)')\npl.ylabel('Inertia')\npl.title('Elbow Method for Optimal K')\npl.grid()\npl.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-13-output-2.png){width=651 height=449}\n:::\n:::\n\n\nTo confirm the above results, let's also find out the Silhouette Score and the related plots:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsilhouette_scores = []\n\nfor k in range(2, 11):\n    kmeans = KMeans(n_clusters=k, random_state=0)\n    kmeans.fit(movie)  # Use the scaled features\n    silhouette_scores.append(silhouette_score(movie, kmeans.labels_))\n\n\npl.figure(figsize=(8, 5))\npl.plot(range(2, 11), silhouette_scores, marker='o')\npl.xlabel('Number of Clusters (K)')\npl.ylabel('Silhouette Score')\npl.title('Silhouette Score for Optimal K')\npl.grid()\npl.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-2.png){width=672 height=449}\n:::\n:::\n\n\nFrom the above two results, we can clearly see that K=2 works best for our model, so let's use that value and fit K-means:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nkmeans = KMeans(n_clusters=2, random_state=0)\n\nkmeans.fit(movie)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KMeans(n_clusters=2, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KMeans</label><div class=\"sk-toggleable__content\"><pre>KMeans(n_clusters=2, random_state=0)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ncluster_labels = kmeans.labels_\nmovie['kmeans_cluster'] = cluster_labels\nmovie.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>director_name</th>\n      <th>critic_review</th>\n      <th>actor1_name</th>\n      <th>genre</th>\n      <th>duration</th>\n      <th>content_rating</th>\n      <th>gross</th>\n      <th>budget</th>\n      <th>total_fb_likes</th>\n      <th>kmeans_cluster</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.373011</td>\n      <td>1.000000</td>\n      <td>0.127907</td>\n      <td>0.121495</td>\n      <td>0.654762</td>\n      <td>0.636364</td>\n      <td>760505847.0</td>\n      <td>237000000.0</td>\n      <td>0.004261</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>0.373011</td>\n      <td>0.433333</td>\n      <td>0.574555</td>\n      <td>0.939920</td>\n      <td>0.750000</td>\n      <td>0.636364</td>\n      <td>658672302.0</td>\n      <td>200000000.0</td>\n      <td>0.066861</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>0.157926</td>\n      <td>0.890278</td>\n      <td>0.123803</td>\n      <td>0.141522</td>\n      <td>0.333333</td>\n      <td>0.636364</td>\n      <td>652177271.0</td>\n      <td>150000000.0</td>\n      <td>0.009160</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>0.794932</td>\n      <td>0.255556</td>\n      <td>0.747606</td>\n      <td>0.248331</td>\n      <td>0.226190</td>\n      <td>0.636364</td>\n      <td>144512310.0</td>\n      <td>38000000.0</td>\n      <td>0.062595</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>186</th>\n      <td>0.279316</td>\n      <td>0.693056</td>\n      <td>0.430233</td>\n      <td>0.520694</td>\n      <td>0.464286</td>\n      <td>0.636364</td>\n      <td>424645577.0</td>\n      <td>130000000.0</td>\n      <td>0.074081</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nTo visualize the clusters, we use Seaborn pair plot function:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nsns.pairplot(movie, hue='kmeans_cluster', palette='Dark2')\npl.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\seaborn\\axisgrid.py:123: UserWarning: The figure layout has changed to tight\n  self._figure.tight_layout(*args, **kwargs)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-17-output-2.png){width=2259 height=2123}\n:::\n:::\n\n\nTo see which features are important to us, we can use the correlation heatmap to compare the features:\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nnew_movie = movie.copy()\nnew_movie['Cluster'] = cluster_labels\n\ncorrelation_matrix = new_movie.corr()\n\npl.figure(figsize=(12, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=\".2f\", cbar=True)\npl.title('Correlation Heatmap')\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-18-output-1.png){width=963 height=744}\n:::\n:::\n\n\nAfter getting the important features from the above plots, we now can reduce out multi-dimentional data into 2 dimensional data using PCA.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\npca = PCA(n_components=2)\nmovie_pca = pca.fit_transform(movie)\n\nkmeans.fit(movie_pca)\ncluster_labels = kmeans.labels_\n\n\npl.scatter(movie_pca[:, 0], movie_pca[:, 1], c=cluster_labels, cmap='viridis')\npl.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='red', label='Cluster Centers')\npl.legend()\npl.title('K-means Clustering')\npl.xlabel('PCA Component 1')\npl.ylabel('PCA Component 2')\npl.show()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\poude\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1416: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=10)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-19-output-2.png){width=587 height=449}\n:::\n:::\n\n\nNow, we can use Random Forest Classifier to determine which features really contribute to the success of the movie. But, before that we need to train our model by splitting our data into training data and testing data.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nX = movie.drop(['kmeans_cluster'], axis=1)\ny = movie['kmeans_cluster']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nrf_classifier = RandomForestClassifier()\n\nrf_classifier.fit(X_train, y_train)\n\nfeature_importances = rf_classifier.feature_importances_\n\n\nfeature_importance_movie = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})\nfeature_importance_movie = feature_importance_movie.sort_values(by='Importance', ascending=False)\n\n\nprint(feature_importance_movie)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Feature  Importance\n6           gross    0.675082\n7          budget    0.208035\n3           genre    0.029711\n4        duration    0.023587\n8  total_fb_likes    0.020611\n1   critic_review    0.013365\n2     actor1_name    0.010415\n0   director_name    0.010244\n5  content_rating    0.008948\n```\n:::\n:::\n\n\nVisualizing this:\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\npl.figure(figsize=(10, 6))\npl.barh(feature_importance_movie['Feature'], feature_importance_movie['Importance'], color='skyblue')\npl.xlabel('Feature Importance')\npl.ylabel('Features')\npl.title('Feature Importance Scores')\npl.gca().invert_yaxis()  # Invert the y-axis for better readability\npl.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-21-output-1.png){width=889 height=523}\n:::\n:::\n\n\nFrom our analysis, apart from the obvious factors like gross lifetime collection of the movie and budget of the movie, the most important factor that determines the success of the Hollywood movies is the Genre of the movie.\n\nThis makes complete sense to me because personally me and my friend circles also usually prefer to watch Sci-fi movies over other genre movies. Thus, we can assume that people generally like certain kind of Genre in a movie.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}